/**
 * This file is generated by MetTeL v2
 * which is designed and implemented
 * by Dmitry Tishkovsky.
 */
package Lukavron.language.Lukavron.test;

import java.util.ArrayList;
import java.io.FileWriter;
import java.io.PrintWriter;
import java.io.StringReader;
import java.io.IOException;

import junit.framework.*;

import org.antlr.runtime.ANTLRFileStream;
import org.antlr.runtime.ANTLRReaderStream;
import org.antlr.runtime.CharStream;
import org.antlr.runtime.CommonTokenStream;
import org.antlr.runtime.RecognitionException;

import Lukavron.language.Lukavron.*;

public class LukavronParserTest extends TestCase{

    final static String inFile = "test/examples/Lukavron/input";
    final static String outFile = "test/examples/Lukavron/output";
    public void testParser() throws IOException, RecognitionException{
        CommonTokenStream tokens = new CommonTokenStream();
        CharStream in = new ANTLRFileStream(inFile);
        LukavronLexer lexer = new LukavronLexer(in);
        tokens.setTokenSource(lexer);
        LukavronParser parser = new LukavronParser(tokens);
        ArrayList<Lukavron_valuation> list = new ArrayList<Lukavron_valuation>();
        parser.valuations(list);
        StringBuilder b = new StringBuilder();
        for(Lukavron_valuation e:list){
            b.append(e);
            b.append(System.getProperty("line.separator"));
        }
        PrintWriter w = new PrintWriter(new FileWriter(outFile));
        w.println(b);
        in = new ANTLRReaderStream(new StringReader(b.toString()));
        lexer = new LukavronLexer(in);
        tokens.setTokenSource(lexer);
        ArrayList<Lukavron_valuation> list0 = new ArrayList<Lukavron_valuation>();
        parser.valuations(list0);
        assertEquals(list,list0);
        final int SIZE = list.size();
        for(int i = 0; i < SIZE; i++){
            for(int j = i + 1; j < SIZE; j++){
                assertEquals(list.get(i).compareTo(list.get(j)), -list.get(j).compareTo(list.get(i)));
                if(list.get(i).compareTo(list.get(j)) == 0){ assertEquals(list.get(i),list.get(j)); }
                w.println("Matching "+list.get(i)+" with "+list.get(j));
                LukavronSubstitution s = list.get(i).match(list.get(j));
                w.println("Substitution: "+s);
                if(s != null){
                    assertEquals(list.get(j),list.get(i).substitute(s));
                }
                s = list.get(j).match(list.get(i));
                if(s != null){
                    assertEquals(list.get(i),list.get(j).substitute(s));
                }
            }
        }
        w.close();
    }
}
