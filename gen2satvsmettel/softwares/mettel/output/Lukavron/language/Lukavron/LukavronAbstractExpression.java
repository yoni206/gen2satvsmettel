/**
 * This file is generated by MetTeL v2
 * which is designed and implemented
 * by Dmitry Tishkovsky.
 */
package Lukavron.language.Lukavron;

import java.util.Comparator;

import mettel.core.tableau.MettelExpression;
import mettel.core.tableau.MettelSubstitution;
import mettel.core.tableau.MettelAbstractExpression;
abstract class LukavronAbstractExpression extends MettelAbstractExpression implements LukavronExpression{

    private static volatile int expressionCounter = 0;
    private int id = -1;
    protected LukavronObjectFactory factory = null;

    LukavronAbstractExpression(LukavronObjectFactory factory){
        super();
        this.factory = factory;
        id = expressionCounter++;
    }

    LukavronAbstractExpression(){
        this(LukavronObjectFactory.DEFAULT);
    }

    public int id(){ return id; }

    public LukavronObjectFactory factory(){ return factory; }

    abstract int sortId();

    abstract int priority();

    public MettelSubstitution match(MettelExpression e){
        if(e instanceof LukavronExpression) return match((LukavronExpression)e);
        return null;
    }

    public MettelExpression substitute(MettelSubstitution s){
        if(s instanceof LukavronSubstitution) return substitute((LukavronSubstitution)s);
        return null;
    }

    abstract int compareArgumentsTo(LukavronAbstractExpression e, Comparator<LukavronAbstractExpression> c);
    abstract int compareArguments(LukavronAbstractExpression e, Comparator<LukavronAbstractExpression> c);

}
