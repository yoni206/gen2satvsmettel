/**
 * This file is generated by MetTeL v2
 * which is designed and implemented
 * by Dmitry Tishkovsky.
 */
package Lukasiewicz.language.Lukasiewicz;

import java.util.Comparator;

import mettel.core.tableau.MettelExpression;
import mettel.core.tableau.MettelSubstitution;
import mettel.core.tableau.MettelAbstractExpression;
abstract class LukasiewiczAbstractExpression extends MettelAbstractExpression implements LukasiewiczExpression{

    private static volatile int expressionCounter = 0;
    private int id = -1;
    protected LukasiewiczObjectFactory factory = null;

    LukasiewiczAbstractExpression(LukasiewiczObjectFactory factory){
        super();
        this.factory = factory;
        id = expressionCounter++;
    }

    LukasiewiczAbstractExpression(){
        this(LukasiewiczObjectFactory.DEFAULT);
    }

    public int id(){ return id; }

    public LukasiewiczObjectFactory factory(){ return factory; }

    abstract int sortId();

    abstract int priority();

    public MettelSubstitution match(MettelExpression e){
        if(e instanceof LukasiewiczExpression) return match((LukasiewiczExpression)e);
        return null;
    }

    public MettelExpression substitute(MettelSubstitution s){
        if(s instanceof LukasiewiczSubstitution) return substitute((LukasiewiczSubstitution)s);
        return null;
    }

    abstract int compareArgumentsTo(LukasiewiczAbstractExpression e, Comparator<LukasiewiczAbstractExpression> c);
    abstract int compareArguments(LukasiewiczAbstractExpression e, Comparator<LukasiewiczAbstractExpression> c);

}
