// $ANTLR 3.4 output/Lukavrona/language/Lukavrona/Lukavrona.g 2017-04-12 16:41:34

package Lukavrona.language.Lukavrona;

import java.util.Collection;
import java.util.ArrayList;
import java.util.LinkedHashSet;

import mettel.core.tableau.MettelGeneralTableauRule;
import mettel.core.language.MettelAbstractLogicParser;


import org.antlr.runtime.*;
import java.util.Stack;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;

/**
 * This file is generated by MetTeL v2
 * which is designed and implemented
 * by Dmitry Tishkovsky.
 */
@SuppressWarnings({"all", "warnings", "unchecked"})
public class LukavronaParser extends MettelAbstractLogicParser {
    public static final String[] tokenNames = new String[] {
        "<invalid>", "<EOR>", "<DOWN>", "<UP>", "COMMENT", "ID", "ID_DIGIT", "INT", "LETTER", "WS", "'!'", "'$;'", "'$|'", "'&'", "'('", "')'", "'->'", "'/'", "'F'", "'T'", "'priority'", "'|'"
    };

    public static final int EOF=-1;
    public static final int T__10=10;
    public static final int T__11=11;
    public static final int T__12=12;
    public static final int T__13=13;
    public static final int T__14=14;
    public static final int T__15=15;
    public static final int T__16=16;
    public static final int T__17=17;
    public static final int T__18=18;
    public static final int T__19=19;
    public static final int T__20=20;
    public static final int T__21=21;
    public static final int COMMENT=4;
    public static final int ID=5;
    public static final int ID_DIGIT=6;
    public static final int INT=7;
    public static final int LETTER=8;
    public static final int WS=9;

    // delegates
    public MettelAbstractLogicParser[] getDelegates() {
        return new MettelAbstractLogicParser[] {};
    }

    // delegators


    public LukavronaParser(TokenStream input) {
        this(input, new RecognizerSharedState());
    }
    public LukavronaParser(TokenStream input, RecognizerSharedState state) {
        super(input, state);
    }

    public String[] getTokenNames() { return LukavronaParser.tokenNames; }
    public String getGrammarFileName() { return "output/Lukavrona/language/Lukavrona/Lukavrona.g"; }


    public Object recoverFromMismatchedToken(IntStream input, int ttype, BitSet follow)
           throws RecognitionException{
        MismatchedTokenException e = new MismatchedTokenException(ttype, input);
        reportError(e);
        throw e;
    }
    private LukavronaObjectFactory factory = LukavronaObjectFactory.DEFAULT;
    public LukavronaParser(TokenStream input, LukavronaObjectFactory factory){
        this(input);
        this.factory = factory;
    }
    public LukavronaParser(TokenStream input, RecognizerSharedState state, LukavronaObjectFactory factory){
        this(input,state);
        this.factory = factory;
    }



    // $ANTLR start "valuations"
    // output/Lukavrona/language/Lukavrona/Lukavrona.g:49:1: valuations[Collection<Lukavrona_valuation> a0] : ( ( (e0= valuation )* ) ( EOF ) ) ;
    public final void valuations(Collection<Lukavrona_valuation> a0) throws RecognitionException {
        Lukavrona_valuation e0 =null;


        try {
            // output/Lukavrona/language/Lukavrona/Lukavrona.g:51:2: ( ( ( (e0= valuation )* ) ( EOF ) ) )
            // output/Lukavrona/language/Lukavrona/Lukavrona.g:52:2: ( ( (e0= valuation )* ) ( EOF ) )
            {
            // output/Lukavrona/language/Lukavrona/Lukavrona.g:52:2: ( ( (e0= valuation )* ) ( EOF ) )
            // output/Lukavrona/language/Lukavrona/Lukavrona.g:53:2: ( (e0= valuation )* ) ( EOF )
            {
            // output/Lukavrona/language/Lukavrona/Lukavrona.g:53:2: ( (e0= valuation )* )
            // output/Lukavrona/language/Lukavrona/Lukavrona.g:54:3: (e0= valuation )*
            {
            // output/Lukavrona/language/Lukavrona/Lukavrona.g:54:3: (e0= valuation )*
            loop1:
            do {
                int alt1=2;
                int LA1_0 = input.LA(1);

                if ( (LA1_0==ID||LA1_0==14||(LA1_0 >= 18 && LA1_0 <= 19)) ) {
                    alt1=1;
                }


                switch (alt1) {
            	case 1 :
            	    // output/Lukavrona/language/Lukavrona/Lukavrona.g:54:4: e0= valuation
            	    {
            	    pushFollow(FOLLOW_valuation_in_valuations72);
            	    e0=valuation();

            	    state._fsp--;
            	    if (state.failed) return ;

            	    if ( state.backtracking==0 ) {
            	       a0.add(e0);
            	       }

            	    }
            	    break;

            	default :
            	    break loop1;
                }
            } while (true);


            }


            // output/Lukavrona/language/Lukavrona/Lukavrona.g:61:2: ( EOF )
            // output/Lukavrona/language/Lukavrona/Lukavrona.g:61:3: EOF
            {
            match(input,EOF,FOLLOW_EOF_in_valuations90); if (state.failed) return ;

            }


            }


            }

        }

        catch (RecognitionException e) {
        reportError(e);
        throw e;
        }

        finally {
        	// do for sure before leaving
        }
        return ;
    }
    // $ANTLR end "valuations"



    // $ANTLR start "valuationVariable"
    // output/Lukavrona/language/Lukavrona/Lukavrona.g:64:1: valuationVariable returns [Lukavrona_valuation r0] : (t= ID ) ;
    public final Lukavrona_valuation valuationVariable() throws RecognitionException {
        Lukavrona_valuation r0 = null;


        Token t=null;

        try {
            // output/Lukavrona/language/Lukavrona/Lukavrona.g:69:2: ( (t= ID ) )
            // output/Lukavrona/language/Lukavrona/Lukavrona.g:70:2: (t= ID )
            {
            // output/Lukavrona/language/Lukavrona/Lukavrona.g:70:2: (t= ID )
            // output/Lukavrona/language/Lukavrona/Lukavrona.g:70:2: t= ID
            {
            t=(Token)match(input,ID,FOLLOW_ID_in_valuationVariable114); if (state.failed) return r0;

            }


            }

            if ( state.backtracking==0 ) {
            r0 = factory.create_valuationVariable(t.getText());
            }
        }

        catch (RecognitionException e) {
        reportError(e);
        throw e;
        }

        finally {
        	// do for sure before leaving
        }
        return r0;
    }
    // $ANTLR end "valuationVariable"



    // $ANTLR start "basic_valuation"
    // output/Lukavrona/language/Lukavrona/Lukavrona.g:72:1: basic_valuation returns [Lukavrona_valuation r0] : ( (e0= valuationVariable ) | ( ( '(' ) (e0= valuation ) ( ')' ) ) ) ;
    public final Lukavrona_valuation basic_valuation() throws RecognitionException {
        Lukavrona_valuation r0 = null;


        Lukavrona_valuation e0 =null;


        try {
            // output/Lukavrona/language/Lukavrona/Lukavrona.g:77:2: ( ( (e0= valuationVariable ) | ( ( '(' ) (e0= valuation ) ( ')' ) ) ) )
            // output/Lukavrona/language/Lukavrona/Lukavrona.g:78:2: ( (e0= valuationVariable ) | ( ( '(' ) (e0= valuation ) ( ')' ) ) )
            {
            // output/Lukavrona/language/Lukavrona/Lukavrona.g:78:2: ( (e0= valuationVariable ) | ( ( '(' ) (e0= valuation ) ( ')' ) ) )
            int alt2=2;
            int LA2_0 = input.LA(1);

            if ( (LA2_0==ID) ) {
                alt2=1;
            }
            else if ( (LA2_0==14) ) {
                alt2=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return r0;}
                NoViableAltException nvae =
                    new NoViableAltException("", 2, 0, input);

                throw nvae;

            }
            switch (alt2) {
                case 1 :
                    // output/Lukavrona/language/Lukavrona/Lukavrona.g:79:2: (e0= valuationVariable )
                    {
                    // output/Lukavrona/language/Lukavrona/Lukavrona.g:79:2: (e0= valuationVariable )
                    // output/Lukavrona/language/Lukavrona/Lukavrona.g:79:3: e0= valuationVariable
                    {
                    pushFollow(FOLLOW_valuationVariable_in_basic_valuation139);
                    e0=valuationVariable();

                    state._fsp--;
                    if (state.failed) return r0;

                    }


                    }
                    break;
                case 2 :
                    // output/Lukavrona/language/Lukavrona/Lukavrona.g:81:2: ( ( '(' ) (e0= valuation ) ( ')' ) )
                    {
                    // output/Lukavrona/language/Lukavrona/Lukavrona.g:81:2: ( ( '(' ) (e0= valuation ) ( ')' ) )
                    // output/Lukavrona/language/Lukavrona/Lukavrona.g:82:3: ( '(' ) (e0= valuation ) ( ')' )
                    {
                    // output/Lukavrona/language/Lukavrona/Lukavrona.g:82:3: ( '(' )
                    // output/Lukavrona/language/Lukavrona/Lukavrona.g:82:4: '('
                    {
                    match(input,14,FOLLOW_14_in_basic_valuation151); if (state.failed) return r0;

                    }


                    // output/Lukavrona/language/Lukavrona/Lukavrona.g:83:3: (e0= valuation )
                    // output/Lukavrona/language/Lukavrona/Lukavrona.g:83:4: e0= valuation
                    {
                    pushFollow(FOLLOW_valuation_in_basic_valuation161);
                    e0=valuation();

                    state._fsp--;
                    if (state.failed) return r0;

                    }


                    // output/Lukavrona/language/Lukavrona/Lukavrona.g:84:3: ( ')' )
                    // output/Lukavrona/language/Lukavrona/Lukavrona.g:84:4: ')'
                    {
                    match(input,15,FOLLOW_15_in_basic_valuation167); if (state.failed) return r0;

                    }


                    }


                    }
                    break;

            }


            }

            if ( state.backtracking==0 ) {
            r0 = e0;
            }
        }

        catch (RecognitionException e) {
        reportError(e);
        throw e;
        }

        finally {
        	// do for sure before leaving
        }
        return r0;
    }
    // $ANTLR end "basic_valuation"



    // $ANTLR start "valuation_true"
    // output/Lukavrona/language/Lukavrona/Lukavrona.g:88:1: valuation_true returns [Lukavrona_valuation r0] : ( (e00= basic_valuation ) | ( ( 'T' ) (e10= formula ) ) ) ;
    public final Lukavrona_valuation valuation_true() throws RecognitionException {
        Lukavrona_valuation r0 = null;


        Lukavrona_valuation e00 =null;

        Lukavrona_formula e10 =null;


        try {
            // output/Lukavrona/language/Lukavrona/Lukavrona.g:90:2: ( ( (e00= basic_valuation ) | ( ( 'T' ) (e10= formula ) ) ) )
            // output/Lukavrona/language/Lukavrona/Lukavrona.g:91:2: ( (e00= basic_valuation ) | ( ( 'T' ) (e10= formula ) ) )
            {
            // output/Lukavrona/language/Lukavrona/Lukavrona.g:91:2: ( (e00= basic_valuation ) | ( ( 'T' ) (e10= formula ) ) )
            int alt3=2;
            int LA3_0 = input.LA(1);

            if ( (LA3_0==ID||LA3_0==14) ) {
                alt3=1;
            }
            else if ( (LA3_0==19) ) {
                alt3=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return r0;}
                NoViableAltException nvae =
                    new NoViableAltException("", 3, 0, input);

                throw nvae;

            }
            switch (alt3) {
                case 1 :
                    // output/Lukavrona/language/Lukavrona/Lukavrona.g:92:2: (e00= basic_valuation )
                    {
                    // output/Lukavrona/language/Lukavrona/Lukavrona.g:92:2: (e00= basic_valuation )
                    // output/Lukavrona/language/Lukavrona/Lukavrona.g:92:3: e00= basic_valuation
                    {
                    pushFollow(FOLLOW_basic_valuation_in_valuation_true193);
                    e00=basic_valuation();

                    state._fsp--;
                    if (state.failed) return r0;

                    if ( state.backtracking==0 ) {
                      r0 = e00;
                      }

                    }


                    }
                    break;
                case 2 :
                    // output/Lukavrona/language/Lukavrona/Lukavrona.g:99:2: ( ( 'T' ) (e10= formula ) )
                    {
                    // output/Lukavrona/language/Lukavrona/Lukavrona.g:99:2: ( ( 'T' ) (e10= formula ) )
                    // output/Lukavrona/language/Lukavrona/Lukavrona.g:100:3: ( 'T' ) (e10= formula )
                    {
                    // output/Lukavrona/language/Lukavrona/Lukavrona.g:100:3: ( 'T' )
                    // output/Lukavrona/language/Lukavrona/Lukavrona.g:100:4: 'T'
                    {
                    match(input,19,FOLLOW_19_in_valuation_true212); if (state.failed) return r0;

                    }


                    // output/Lukavrona/language/Lukavrona/Lukavrona.g:101:3: (e10= formula )
                    // output/Lukavrona/language/Lukavrona/Lukavrona.g:101:4: e10= formula
                    {
                    pushFollow(FOLLOW_formula_in_valuation_true222);
                    e10=formula();

                    state._fsp--;
                    if (state.failed) return r0;

                    }


                    if ( state.backtracking==0 ) {
                      r0 = factory.create_true_valuation(e10);
                      }

                    }


                    }
                    break;

            }


            }

        }

        catch (RecognitionException e) {
        reportError(e);
        throw e;
        }

        finally {
        	// do for sure before leaving
        }
        return r0;
    }
    // $ANTLR end "valuation_true"



    // $ANTLR start "valuation_false"
    // output/Lukavrona/language/Lukavrona/Lukavrona.g:110:1: valuation_false returns [Lukavrona_valuation r0] : ( (e00= valuation_true ) | ( ( 'F' ) (e10= formula ) ) ) ;
    public final Lukavrona_valuation valuation_false() throws RecognitionException {
        Lukavrona_valuation r0 = null;


        Lukavrona_valuation e00 =null;

        Lukavrona_formula e10 =null;


        try {
            // output/Lukavrona/language/Lukavrona/Lukavrona.g:112:2: ( ( (e00= valuation_true ) | ( ( 'F' ) (e10= formula ) ) ) )
            // output/Lukavrona/language/Lukavrona/Lukavrona.g:113:2: ( (e00= valuation_true ) | ( ( 'F' ) (e10= formula ) ) )
            {
            // output/Lukavrona/language/Lukavrona/Lukavrona.g:113:2: ( (e00= valuation_true ) | ( ( 'F' ) (e10= formula ) ) )
            int alt4=2;
            int LA4_0 = input.LA(1);

            if ( (LA4_0==ID||LA4_0==14||LA4_0==19) ) {
                alt4=1;
            }
            else if ( (LA4_0==18) ) {
                alt4=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return r0;}
                NoViableAltException nvae =
                    new NoViableAltException("", 4, 0, input);

                throw nvae;

            }
            switch (alt4) {
                case 1 :
                    // output/Lukavrona/language/Lukavrona/Lukavrona.g:114:2: (e00= valuation_true )
                    {
                    // output/Lukavrona/language/Lukavrona/Lukavrona.g:114:2: (e00= valuation_true )
                    // output/Lukavrona/language/Lukavrona/Lukavrona.g:114:3: e00= valuation_true
                    {
                    pushFollow(FOLLOW_valuation_true_in_valuation_false255);
                    e00=valuation_true();

                    state._fsp--;
                    if (state.failed) return r0;

                    if ( state.backtracking==0 ) {
                      r0 = e00;
                      }

                    }


                    }
                    break;
                case 2 :
                    // output/Lukavrona/language/Lukavrona/Lukavrona.g:121:2: ( ( 'F' ) (e10= formula ) )
                    {
                    // output/Lukavrona/language/Lukavrona/Lukavrona.g:121:2: ( ( 'F' ) (e10= formula ) )
                    // output/Lukavrona/language/Lukavrona/Lukavrona.g:122:3: ( 'F' ) (e10= formula )
                    {
                    // output/Lukavrona/language/Lukavrona/Lukavrona.g:122:3: ( 'F' )
                    // output/Lukavrona/language/Lukavrona/Lukavrona.g:122:4: 'F'
                    {
                    match(input,18,FOLLOW_18_in_valuation_false274); if (state.failed) return r0;

                    }


                    // output/Lukavrona/language/Lukavrona/Lukavrona.g:123:3: (e10= formula )
                    // output/Lukavrona/language/Lukavrona/Lukavrona.g:123:4: e10= formula
                    {
                    pushFollow(FOLLOW_formula_in_valuation_false284);
                    e10=formula();

                    state._fsp--;
                    if (state.failed) return r0;

                    }


                    if ( state.backtracking==0 ) {
                      r0 = factory.create_false_valuation(e10);
                      }

                    }


                    }
                    break;

            }


            }

        }

        catch (RecognitionException e) {
        reportError(e);
        throw e;
        }

        finally {
        	// do for sure before leaving
        }
        return r0;
    }
    // $ANTLR end "valuation_false"



    // $ANTLR start "valuation"
    // output/Lukavrona/language/Lukavrona/Lukavrona.g:132:1: valuation returns [Lukavrona_valuation r0] : (e0= valuation_false ) ;
    public final Lukavrona_valuation valuation() throws RecognitionException {
        Lukavrona_valuation r0 = null;


        Lukavrona_valuation e0 =null;


        try {
            // output/Lukavrona/language/Lukavrona/Lukavrona.g:137:2: ( (e0= valuation_false ) )
            // output/Lukavrona/language/Lukavrona/Lukavrona.g:138:2: (e0= valuation_false )
            {
            // output/Lukavrona/language/Lukavrona/Lukavrona.g:138:2: (e0= valuation_false )
            // output/Lukavrona/language/Lukavrona/Lukavrona.g:138:2: e0= valuation_false
            {
            pushFollow(FOLLOW_valuation_false_in_valuation318);
            e0=valuation_false();

            state._fsp--;
            if (state.failed) return r0;

            }


            }

            if ( state.backtracking==0 ) {
            r0 = e0;
            }
        }

        catch (RecognitionException e) {
        reportError(e);
        throw e;
        }

        finally {
        	// do for sure before leaving
        }
        return r0;
    }
    // $ANTLR end "valuation"



    // $ANTLR start "formulas"
    // output/Lukavrona/language/Lukavrona/Lukavrona.g:140:1: formulas[Collection<Lukavrona_formula> a0] : ( ( (e0= formula )* ) ( EOF ) ) ;
    public final void formulas(Collection<Lukavrona_formula> a0) throws RecognitionException {
        Lukavrona_formula e0 =null;


        try {
            // output/Lukavrona/language/Lukavrona/Lukavrona.g:142:2: ( ( ( (e0= formula )* ) ( EOF ) ) )
            // output/Lukavrona/language/Lukavrona/Lukavrona.g:143:2: ( ( (e0= formula )* ) ( EOF ) )
            {
            // output/Lukavrona/language/Lukavrona/Lukavrona.g:143:2: ( ( (e0= formula )* ) ( EOF ) )
            // output/Lukavrona/language/Lukavrona/Lukavrona.g:144:2: ( (e0= formula )* ) ( EOF )
            {
            // output/Lukavrona/language/Lukavrona/Lukavrona.g:144:2: ( (e0= formula )* )
            // output/Lukavrona/language/Lukavrona/Lukavrona.g:145:3: (e0= formula )*
            {
            // output/Lukavrona/language/Lukavrona/Lukavrona.g:145:3: (e0= formula )*
            loop5:
            do {
                int alt5=2;
                int LA5_0 = input.LA(1);

                if ( (LA5_0==ID||LA5_0==10||LA5_0==14) ) {
                    alt5=1;
                }


                switch (alt5) {
            	case 1 :
            	    // output/Lukavrona/language/Lukavrona/Lukavrona.g:145:4: e0= formula
            	    {
            	    pushFollow(FOLLOW_formula_in_formulas341);
            	    e0=formula();

            	    state._fsp--;
            	    if (state.failed) return ;

            	    if ( state.backtracking==0 ) {
            	       a0.add(e0);
            	       }

            	    }
            	    break;

            	default :
            	    break loop5;
                }
            } while (true);


            }


            // output/Lukavrona/language/Lukavrona/Lukavrona.g:152:2: ( EOF )
            // output/Lukavrona/language/Lukavrona/Lukavrona.g:152:3: EOF
            {
            match(input,EOF,FOLLOW_EOF_in_formulas359); if (state.failed) return ;

            }


            }


            }

        }

        catch (RecognitionException e) {
        reportError(e);
        throw e;
        }

        finally {
        	// do for sure before leaving
        }
        return ;
    }
    // $ANTLR end "formulas"



    // $ANTLR start "formulaVariable"
    // output/Lukavrona/language/Lukavrona/Lukavrona.g:155:1: formulaVariable returns [Lukavrona_formula r0] : (t= ID ) ;
    public final Lukavrona_formula formulaVariable() throws RecognitionException {
        Lukavrona_formula r0 = null;


        Token t=null;

        try {
            // output/Lukavrona/language/Lukavrona/Lukavrona.g:160:2: ( (t= ID ) )
            // output/Lukavrona/language/Lukavrona/Lukavrona.g:161:2: (t= ID )
            {
            // output/Lukavrona/language/Lukavrona/Lukavrona.g:161:2: (t= ID )
            // output/Lukavrona/language/Lukavrona/Lukavrona.g:161:2: t= ID
            {
            t=(Token)match(input,ID,FOLLOW_ID_in_formulaVariable383); if (state.failed) return r0;

            }


            }

            if ( state.backtracking==0 ) {
            r0 = factory.create_formulaVariable(t.getText());
            }
        }

        catch (RecognitionException e) {
        reportError(e);
        throw e;
        }

        finally {
        	// do for sure before leaving
        }
        return r0;
    }
    // $ANTLR end "formulaVariable"



    // $ANTLR start "basic_formula"
    // output/Lukavrona/language/Lukavrona/Lukavrona.g:163:1: basic_formula returns [Lukavrona_formula r0] : ( (e0= formulaVariable ) | ( ( '(' ) (e0= formula ) ( ')' ) ) ) ;
    public final Lukavrona_formula basic_formula() throws RecognitionException {
        Lukavrona_formula r0 = null;


        Lukavrona_formula e0 =null;


        try {
            // output/Lukavrona/language/Lukavrona/Lukavrona.g:168:2: ( ( (e0= formulaVariable ) | ( ( '(' ) (e0= formula ) ( ')' ) ) ) )
            // output/Lukavrona/language/Lukavrona/Lukavrona.g:169:2: ( (e0= formulaVariable ) | ( ( '(' ) (e0= formula ) ( ')' ) ) )
            {
            // output/Lukavrona/language/Lukavrona/Lukavrona.g:169:2: ( (e0= formulaVariable ) | ( ( '(' ) (e0= formula ) ( ')' ) ) )
            int alt6=2;
            int LA6_0 = input.LA(1);

            if ( (LA6_0==ID) ) {
                alt6=1;
            }
            else if ( (LA6_0==14) ) {
                alt6=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return r0;}
                NoViableAltException nvae =
                    new NoViableAltException("", 6, 0, input);

                throw nvae;

            }
            switch (alt6) {
                case 1 :
                    // output/Lukavrona/language/Lukavrona/Lukavrona.g:170:2: (e0= formulaVariable )
                    {
                    // output/Lukavrona/language/Lukavrona/Lukavrona.g:170:2: (e0= formulaVariable )
                    // output/Lukavrona/language/Lukavrona/Lukavrona.g:170:3: e0= formulaVariable
                    {
                    pushFollow(FOLLOW_formulaVariable_in_basic_formula408);
                    e0=formulaVariable();

                    state._fsp--;
                    if (state.failed) return r0;

                    }


                    }
                    break;
                case 2 :
                    // output/Lukavrona/language/Lukavrona/Lukavrona.g:172:2: ( ( '(' ) (e0= formula ) ( ')' ) )
                    {
                    // output/Lukavrona/language/Lukavrona/Lukavrona.g:172:2: ( ( '(' ) (e0= formula ) ( ')' ) )
                    // output/Lukavrona/language/Lukavrona/Lukavrona.g:173:3: ( '(' ) (e0= formula ) ( ')' )
                    {
                    // output/Lukavrona/language/Lukavrona/Lukavrona.g:173:3: ( '(' )
                    // output/Lukavrona/language/Lukavrona/Lukavrona.g:173:4: '('
                    {
                    match(input,14,FOLLOW_14_in_basic_formula420); if (state.failed) return r0;

                    }


                    // output/Lukavrona/language/Lukavrona/Lukavrona.g:174:3: (e0= formula )
                    // output/Lukavrona/language/Lukavrona/Lukavrona.g:174:4: e0= formula
                    {
                    pushFollow(FOLLOW_formula_in_basic_formula430);
                    e0=formula();

                    state._fsp--;
                    if (state.failed) return r0;

                    }


                    // output/Lukavrona/language/Lukavrona/Lukavrona.g:175:3: ( ')' )
                    // output/Lukavrona/language/Lukavrona/Lukavrona.g:175:4: ')'
                    {
                    match(input,15,FOLLOW_15_in_basic_formula436); if (state.failed) return r0;

                    }


                    }


                    }
                    break;

            }


            }

            if ( state.backtracking==0 ) {
            r0 = e0;
            }
        }

        catch (RecognitionException e) {
        reportError(e);
        throw e;
        }

        finally {
        	// do for sure before leaving
        }
        return r0;
    }
    // $ANTLR end "basic_formula"



    // $ANTLR start "formula_negation"
    // output/Lukavrona/language/Lukavrona/Lukavrona.g:179:1: formula_negation returns [Lukavrona_formula r0] : ( (e00= basic_formula ) | ( ( '!' ) (e10= basic_formula ) ) ) ;
    public final Lukavrona_formula formula_negation() throws RecognitionException {
        Lukavrona_formula r0 = null;


        Lukavrona_formula e00 =null;

        Lukavrona_formula e10 =null;


        try {
            // output/Lukavrona/language/Lukavrona/Lukavrona.g:181:2: ( ( (e00= basic_formula ) | ( ( '!' ) (e10= basic_formula ) ) ) )
            // output/Lukavrona/language/Lukavrona/Lukavrona.g:182:2: ( (e00= basic_formula ) | ( ( '!' ) (e10= basic_formula ) ) )
            {
            // output/Lukavrona/language/Lukavrona/Lukavrona.g:182:2: ( (e00= basic_formula ) | ( ( '!' ) (e10= basic_formula ) ) )
            int alt7=2;
            int LA7_0 = input.LA(1);

            if ( (LA7_0==ID||LA7_0==14) ) {
                alt7=1;
            }
            else if ( (LA7_0==10) ) {
                alt7=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return r0;}
                NoViableAltException nvae =
                    new NoViableAltException("", 7, 0, input);

                throw nvae;

            }
            switch (alt7) {
                case 1 :
                    // output/Lukavrona/language/Lukavrona/Lukavrona.g:183:2: (e00= basic_formula )
                    {
                    // output/Lukavrona/language/Lukavrona/Lukavrona.g:183:2: (e00= basic_formula )
                    // output/Lukavrona/language/Lukavrona/Lukavrona.g:183:3: e00= basic_formula
                    {
                    pushFollow(FOLLOW_basic_formula_in_formula_negation462);
                    e00=basic_formula();

                    state._fsp--;
                    if (state.failed) return r0;

                    if ( state.backtracking==0 ) {
                      r0 = e00;
                      }

                    }


                    }
                    break;
                case 2 :
                    // output/Lukavrona/language/Lukavrona/Lukavrona.g:190:2: ( ( '!' ) (e10= basic_formula ) )
                    {
                    // output/Lukavrona/language/Lukavrona/Lukavrona.g:190:2: ( ( '!' ) (e10= basic_formula ) )
                    // output/Lukavrona/language/Lukavrona/Lukavrona.g:191:3: ( '!' ) (e10= basic_formula )
                    {
                    // output/Lukavrona/language/Lukavrona/Lukavrona.g:191:3: ( '!' )
                    // output/Lukavrona/language/Lukavrona/Lukavrona.g:191:4: '!'
                    {
                    match(input,10,FOLLOW_10_in_formula_negation481); if (state.failed) return r0;

                    }


                    // output/Lukavrona/language/Lukavrona/Lukavrona.g:192:3: (e10= basic_formula )
                    // output/Lukavrona/language/Lukavrona/Lukavrona.g:192:4: e10= basic_formula
                    {
                    pushFollow(FOLLOW_basic_formula_in_formula_negation491);
                    e10=basic_formula();

                    state._fsp--;
                    if (state.failed) return r0;

                    }


                    if ( state.backtracking==0 ) {
                      r0 = factory.create_negation_formula(e10);
                      }

                    }


                    }
                    break;

            }


            }

        }

        catch (RecognitionException e) {
        reportError(e);
        throw e;
        }

        finally {
        	// do for sure before leaving
        }
        return r0;
    }
    // $ANTLR end "formula_negation"



    // $ANTLR start "formula_conjunction"
    // output/Lukavrona/language/Lukavrona/Lukavrona.g:201:1: formula_conjunction returns [Lukavrona_formula r0] : ( (e0= formula_negation ) ( ( ( '&' ) (e1= formula_negation ) )* ) ) ;
    public final Lukavrona_formula formula_conjunction() throws RecognitionException {
        Lukavrona_formula r0 = null;


        Lukavrona_formula e0 =null;

        Lukavrona_formula e1 =null;


        try {
            // output/Lukavrona/language/Lukavrona/Lukavrona.g:206:2: ( ( (e0= formula_negation ) ( ( ( '&' ) (e1= formula_negation ) )* ) ) )
            // output/Lukavrona/language/Lukavrona/Lukavrona.g:207:2: ( (e0= formula_negation ) ( ( ( '&' ) (e1= formula_negation ) )* ) )
            {
            // output/Lukavrona/language/Lukavrona/Lukavrona.g:207:2: ( (e0= formula_negation ) ( ( ( '&' ) (e1= formula_negation ) )* ) )
            // output/Lukavrona/language/Lukavrona/Lukavrona.g:208:2: (e0= formula_negation ) ( ( ( '&' ) (e1= formula_negation ) )* )
            {
            // output/Lukavrona/language/Lukavrona/Lukavrona.g:208:2: (e0= formula_negation )
            // output/Lukavrona/language/Lukavrona/Lukavrona.g:208:3: e0= formula_negation
            {
            pushFollow(FOLLOW_formula_negation_in_formula_conjunction528);
            e0=formula_negation();

            state._fsp--;
            if (state.failed) return r0;

            }


            // output/Lukavrona/language/Lukavrona/Lukavrona.g:209:2: ( ( ( '&' ) (e1= formula_negation ) )* )
            // output/Lukavrona/language/Lukavrona/Lukavrona.g:210:3: ( ( '&' ) (e1= formula_negation ) )*
            {
            // output/Lukavrona/language/Lukavrona/Lukavrona.g:210:3: ( ( '&' ) (e1= formula_negation ) )*
            loop8:
            do {
                int alt8=2;
                int LA8_0 = input.LA(1);

                if ( (LA8_0==13) ) {
                    alt8=1;
                }


                switch (alt8) {
            	case 1 :
            	    // output/Lukavrona/language/Lukavrona/Lukavrona.g:211:4: ( '&' ) (e1= formula_negation )
            	    {
            	    // output/Lukavrona/language/Lukavrona/Lukavrona.g:211:4: ( '&' )
            	    // output/Lukavrona/language/Lukavrona/Lukavrona.g:211:5: '&'
            	    {
            	    match(input,13,FOLLOW_13_in_formula_conjunction542); if (state.failed) return r0;

            	    }


            	    // output/Lukavrona/language/Lukavrona/Lukavrona.g:212:4: (e1= formula_negation )
            	    // output/Lukavrona/language/Lukavrona/Lukavrona.g:212:5: e1= formula_negation
            	    {
            	    pushFollow(FOLLOW_formula_negation_in_formula_conjunction553);
            	    e1=formula_negation();

            	    state._fsp--;
            	    if (state.failed) return r0;

            	    if ( state.backtracking==0 ) {
            	        e0 = factory.create_conjunction_formula(e0, e1);
            	        }

            	    }


            	    }
            	    break;

            	default :
            	    break loop8;
                }
            } while (true);


            }


            }


            }

            if ( state.backtracking==0 ) {
            r0 = e0;
            }
        }

        catch (RecognitionException e) {
        reportError(e);
        throw e;
        }

        finally {
        	// do for sure before leaving
        }
        return r0;
    }
    // $ANTLR end "formula_conjunction"



    // $ANTLR start "formula_disjunction"
    // output/Lukavrona/language/Lukavrona/Lukavrona.g:222:1: formula_disjunction returns [Lukavrona_formula r0] : ( (e0= formula_conjunction ) ( ( ( '|' ) (e1= formula_conjunction ) )* ) ) ;
    public final Lukavrona_formula formula_disjunction() throws RecognitionException {
        Lukavrona_formula r0 = null;


        Lukavrona_formula e0 =null;

        Lukavrona_formula e1 =null;


        try {
            // output/Lukavrona/language/Lukavrona/Lukavrona.g:227:2: ( ( (e0= formula_conjunction ) ( ( ( '|' ) (e1= formula_conjunction ) )* ) ) )
            // output/Lukavrona/language/Lukavrona/Lukavrona.g:228:2: ( (e0= formula_conjunction ) ( ( ( '|' ) (e1= formula_conjunction ) )* ) )
            {
            // output/Lukavrona/language/Lukavrona/Lukavrona.g:228:2: ( (e0= formula_conjunction ) ( ( ( '|' ) (e1= formula_conjunction ) )* ) )
            // output/Lukavrona/language/Lukavrona/Lukavrona.g:229:2: (e0= formula_conjunction ) ( ( ( '|' ) (e1= formula_conjunction ) )* )
            {
            // output/Lukavrona/language/Lukavrona/Lukavrona.g:229:2: (e0= formula_conjunction )
            // output/Lukavrona/language/Lukavrona/Lukavrona.g:229:3: e0= formula_conjunction
            {
            pushFollow(FOLLOW_formula_conjunction_in_formula_disjunction599);
            e0=formula_conjunction();

            state._fsp--;
            if (state.failed) return r0;

            }


            // output/Lukavrona/language/Lukavrona/Lukavrona.g:230:2: ( ( ( '|' ) (e1= formula_conjunction ) )* )
            // output/Lukavrona/language/Lukavrona/Lukavrona.g:231:3: ( ( '|' ) (e1= formula_conjunction ) )*
            {
            // output/Lukavrona/language/Lukavrona/Lukavrona.g:231:3: ( ( '|' ) (e1= formula_conjunction ) )*
            loop9:
            do {
                int alt9=2;
                int LA9_0 = input.LA(1);

                if ( (LA9_0==21) ) {
                    alt9=1;
                }


                switch (alt9) {
            	case 1 :
            	    // output/Lukavrona/language/Lukavrona/Lukavrona.g:232:4: ( '|' ) (e1= formula_conjunction )
            	    {
            	    // output/Lukavrona/language/Lukavrona/Lukavrona.g:232:4: ( '|' )
            	    // output/Lukavrona/language/Lukavrona/Lukavrona.g:232:5: '|'
            	    {
            	    match(input,21,FOLLOW_21_in_formula_disjunction613); if (state.failed) return r0;

            	    }


            	    // output/Lukavrona/language/Lukavrona/Lukavrona.g:233:4: (e1= formula_conjunction )
            	    // output/Lukavrona/language/Lukavrona/Lukavrona.g:233:5: e1= formula_conjunction
            	    {
            	    pushFollow(FOLLOW_formula_conjunction_in_formula_disjunction624);
            	    e1=formula_conjunction();

            	    state._fsp--;
            	    if (state.failed) return r0;

            	    if ( state.backtracking==0 ) {
            	        e0 = factory.create_disjunction_formula(e0, e1);
            	        }

            	    }


            	    }
            	    break;

            	default :
            	    break loop9;
                }
            } while (true);


            }


            }


            }

            if ( state.backtracking==0 ) {
            r0 = e0;
            }
        }

        catch (RecognitionException e) {
        reportError(e);
        throw e;
        }

        finally {
        	// do for sure before leaving
        }
        return r0;
    }
    // $ANTLR end "formula_disjunction"



    // $ANTLR start "formula_implication"
    // output/Lukavrona/language/Lukavrona/Lukavrona.g:243:1: formula_implication returns [Lukavrona_formula r0] : ( (e0= formula_disjunction ) ( ( ( '->' ) (e1= formula_disjunction ) )* ) ) ;
    public final Lukavrona_formula formula_implication() throws RecognitionException {
        Lukavrona_formula r0 = null;


        Lukavrona_formula e0 =null;

        Lukavrona_formula e1 =null;


        try {
            // output/Lukavrona/language/Lukavrona/Lukavrona.g:248:2: ( ( (e0= formula_disjunction ) ( ( ( '->' ) (e1= formula_disjunction ) )* ) ) )
            // output/Lukavrona/language/Lukavrona/Lukavrona.g:249:2: ( (e0= formula_disjunction ) ( ( ( '->' ) (e1= formula_disjunction ) )* ) )
            {
            // output/Lukavrona/language/Lukavrona/Lukavrona.g:249:2: ( (e0= formula_disjunction ) ( ( ( '->' ) (e1= formula_disjunction ) )* ) )
            // output/Lukavrona/language/Lukavrona/Lukavrona.g:250:2: (e0= formula_disjunction ) ( ( ( '->' ) (e1= formula_disjunction ) )* )
            {
            // output/Lukavrona/language/Lukavrona/Lukavrona.g:250:2: (e0= formula_disjunction )
            // output/Lukavrona/language/Lukavrona/Lukavrona.g:250:3: e0= formula_disjunction
            {
            pushFollow(FOLLOW_formula_disjunction_in_formula_implication670);
            e0=formula_disjunction();

            state._fsp--;
            if (state.failed) return r0;

            }


            // output/Lukavrona/language/Lukavrona/Lukavrona.g:251:2: ( ( ( '->' ) (e1= formula_disjunction ) )* )
            // output/Lukavrona/language/Lukavrona/Lukavrona.g:252:3: ( ( '->' ) (e1= formula_disjunction ) )*
            {
            // output/Lukavrona/language/Lukavrona/Lukavrona.g:252:3: ( ( '->' ) (e1= formula_disjunction ) )*
            loop10:
            do {
                int alt10=2;
                int LA10_0 = input.LA(1);

                if ( (LA10_0==16) ) {
                    alt10=1;
                }


                switch (alt10) {
            	case 1 :
            	    // output/Lukavrona/language/Lukavrona/Lukavrona.g:253:4: ( '->' ) (e1= formula_disjunction )
            	    {
            	    // output/Lukavrona/language/Lukavrona/Lukavrona.g:253:4: ( '->' )
            	    // output/Lukavrona/language/Lukavrona/Lukavrona.g:253:5: '->'
            	    {
            	    match(input,16,FOLLOW_16_in_formula_implication684); if (state.failed) return r0;

            	    }


            	    // output/Lukavrona/language/Lukavrona/Lukavrona.g:254:4: (e1= formula_disjunction )
            	    // output/Lukavrona/language/Lukavrona/Lukavrona.g:254:5: e1= formula_disjunction
            	    {
            	    pushFollow(FOLLOW_formula_disjunction_in_formula_implication695);
            	    e1=formula_disjunction();

            	    state._fsp--;
            	    if (state.failed) return r0;

            	    if ( state.backtracking==0 ) {
            	        e0 = factory.create_implication_formula(e0, e1);
            	        }

            	    }


            	    }
            	    break;

            	default :
            	    break loop10;
                }
            } while (true);


            }


            }


            }

            if ( state.backtracking==0 ) {
            r0 = e0;
            }
        }

        catch (RecognitionException e) {
        reportError(e);
        throw e;
        }

        finally {
        	// do for sure before leaving
        }
        return r0;
    }
    // $ANTLR end "formula_implication"



    // $ANTLR start "formula"
    // output/Lukavrona/language/Lukavrona/Lukavrona.g:264:1: formula returns [Lukavrona_formula r0] : (e0= formula_implication ) ;
    public final Lukavrona_formula formula() throws RecognitionException {
        Lukavrona_formula r0 = null;


        Lukavrona_formula e0 =null;


        try {
            // output/Lukavrona/language/Lukavrona/Lukavrona.g:269:2: ( (e0= formula_implication ) )
            // output/Lukavrona/language/Lukavrona/Lukavrona.g:270:2: (e0= formula_implication )
            {
            // output/Lukavrona/language/Lukavrona/Lukavrona.g:270:2: (e0= formula_implication )
            // output/Lukavrona/language/Lukavrona/Lukavrona.g:270:2: e0= formula_implication
            {
            pushFollow(FOLLOW_formula_implication_in_formula738);
            e0=formula_implication();

            state._fsp--;
            if (state.failed) return r0;

            }


            }

            if ( state.backtracking==0 ) {
            r0 = e0;
            }
        }

        catch (RecognitionException e) {
        reportError(e);
        throw e;
        }

        finally {
        	// do for sure before leaving
        }
        return r0;
    }
    // $ANTLR end "formula"



    // $ANTLR start "expressions"
    // output/Lukavrona/language/Lukavrona/Lukavrona.g:272:1: expressions returns [ArrayList<LukavronaExpression> r0] : ( ( (e0= expression )* ) ) ;
    public final ArrayList<LukavronaExpression> expressions() throws RecognitionException {
        ArrayList<LukavronaExpression> r0 = null;


        LukavronaExpression e0 =null;



        r0 = new ArrayList<LukavronaExpression>();

        try {
            // output/Lukavrona/language/Lukavrona/Lukavrona.g:277:2: ( ( ( (e0= expression )* ) ) )
            // output/Lukavrona/language/Lukavrona/Lukavrona.g:278:2: ( ( (e0= expression )* ) )
            {
            // output/Lukavrona/language/Lukavrona/Lukavrona.g:278:2: ( ( (e0= expression )* ) )
            // output/Lukavrona/language/Lukavrona/Lukavrona.g:278:2: ( (e0= expression )* )
            {
            // output/Lukavrona/language/Lukavrona/Lukavrona.g:278:2: ( (e0= expression )* )
            // output/Lukavrona/language/Lukavrona/Lukavrona.g:279:3: (e0= expression )*
            {
            // output/Lukavrona/language/Lukavrona/Lukavrona.g:279:3: (e0= expression )*
            loop11:
            do {
                int alt11=2;
                int LA11_0 = input.LA(1);

                if ( (LA11_0==ID||LA11_0==10||LA11_0==14||(LA11_0 >= 18 && LA11_0 <= 19)) ) {
                    alt11=1;
                }


                switch (alt11) {
            	case 1 :
            	    // output/Lukavrona/language/Lukavrona/Lukavrona.g:279:4: e0= expression
            	    {
            	    pushFollow(FOLLOW_expression_in_expressions765);
            	    e0=expression();

            	    state._fsp--;
            	    if (state.failed) return r0;

            	    if ( state.backtracking==0 ) {
            	       r0.add(e0);
            	       }

            	    }
            	    break;

            	default :
            	    break loop11;
                }
            } while (true);


            }


            }


            }

        }

        catch (RecognitionException e) {
        reportError(e);
        throw e;
        }

        finally {
        	// do for sure before leaving
        }
        return r0;
    }
    // $ANTLR end "expressions"



    // $ANTLR start "expression"
    // output/Lukavrona/language/Lukavrona/Lukavrona.g:287:1: expression returns [LukavronaExpression r0] : ( ( ( valuation )=>valuationExpression= valuation ) | ( ( formula )=>formulaExpression= formula ) ) ;
    public final LukavronaExpression expression() throws RecognitionException {
        LukavronaExpression r0 = null;


        Lukavrona_valuation valuationExpression =null;

        Lukavrona_formula formulaExpression =null;


        try {
            // output/Lukavrona/language/Lukavrona/Lukavrona.g:289:2: ( ( ( ( valuation )=>valuationExpression= valuation ) | ( ( formula )=>formulaExpression= formula ) ) )
            // output/Lukavrona/language/Lukavrona/Lukavrona.g:290:2: ( ( ( valuation )=>valuationExpression= valuation ) | ( ( formula )=>formulaExpression= formula ) )
            {
            // output/Lukavrona/language/Lukavrona/Lukavrona.g:290:2: ( ( ( valuation )=>valuationExpression= valuation ) | ( ( formula )=>formulaExpression= formula ) )
            int alt12=2;
            int LA12_0 = input.LA(1);

            if ( (LA12_0==ID) ) {
                int LA12_1 = input.LA(2);

                if ( (synpred1_Lukavrona()) ) {
                    alt12=1;
                }
                else if ( (synpred2_Lukavrona()) ) {
                    alt12=2;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return r0;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 12, 1, input);

                    throw nvae;

                }
            }
            else if ( (LA12_0==14) ) {
                int LA12_2 = input.LA(2);

                if ( (synpred1_Lukavrona()) ) {
                    alt12=1;
                }
                else if ( (synpred2_Lukavrona()) ) {
                    alt12=2;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return r0;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 12, 2, input);

                    throw nvae;

                }
            }
            else if ( (LA12_0==19) && (synpred1_Lukavrona())) {
                alt12=1;
            }
            else if ( (LA12_0==18) && (synpred1_Lukavrona())) {
                alt12=1;
            }
            else if ( (LA12_0==10) && (synpred2_Lukavrona())) {
                alt12=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return r0;}
                NoViableAltException nvae =
                    new NoViableAltException("", 12, 0, input);

                throw nvae;

            }
            switch (alt12) {
                case 1 :
                    // output/Lukavrona/language/Lukavrona/Lukavrona.g:291:2: ( ( valuation )=>valuationExpression= valuation )
                    {
                    // output/Lukavrona/language/Lukavrona/Lukavrona.g:291:2: ( ( valuation )=>valuationExpression= valuation )
                    // output/Lukavrona/language/Lukavrona/Lukavrona.g:291:3: ( valuation )=>valuationExpression= valuation
                    {
                    pushFollow(FOLLOW_valuation_in_expression805);
                    valuationExpression=valuation();

                    state._fsp--;
                    if (state.failed) return r0;

                    if ( state.backtracking==0 ) {
                      r0 = valuationExpression;
                      }

                    }


                    }
                    break;
                case 2 :
                    // output/Lukavrona/language/Lukavrona/Lukavrona.g:298:2: ( ( formula )=>formulaExpression= formula )
                    {
                    // output/Lukavrona/language/Lukavrona/Lukavrona.g:298:2: ( ( formula )=>formulaExpression= formula )
                    // output/Lukavrona/language/Lukavrona/Lukavrona.g:298:3: ( formula )=>formulaExpression= formula
                    {
                    pushFollow(FOLLOW_formula_in_expression829);
                    formulaExpression=formula();

                    state._fsp--;
                    if (state.failed) return r0;

                    if ( state.backtracking==0 ) {
                      r0 = formulaExpression;
                      }

                    }


                    }
                    break;

            }


            }

        }

        catch (RecognitionException e) {
        reportError(e);
        throw e;
        }

        finally {
        	// do for sure before leaving
        }
        return r0;
    }
    // $ANTLR end "expression"



    // $ANTLR start "expressionEOF"
    // output/Lukavrona/language/Lukavrona/Lukavrona.g:306:1: expressionEOF returns [LukavronaExpression r0] : ( ( ( valuation )=>valuationExpression= valuation ) | ( ( formula )=>formulaExpression= formula ) | ( EOF ) ) ;
    public final LukavronaExpression expressionEOF() throws RecognitionException {
        LukavronaExpression r0 = null;


        Lukavrona_valuation valuationExpression =null;

        Lukavrona_formula formulaExpression =null;


        try {
            // output/Lukavrona/language/Lukavrona/Lukavrona.g:308:2: ( ( ( ( valuation )=>valuationExpression= valuation ) | ( ( formula )=>formulaExpression= formula ) | ( EOF ) ) )
            // output/Lukavrona/language/Lukavrona/Lukavrona.g:309:2: ( ( ( valuation )=>valuationExpression= valuation ) | ( ( formula )=>formulaExpression= formula ) | ( EOF ) )
            {
            // output/Lukavrona/language/Lukavrona/Lukavrona.g:309:2: ( ( ( valuation )=>valuationExpression= valuation ) | ( ( formula )=>formulaExpression= formula ) | ( EOF ) )
            int alt13=3;
            int LA13_0 = input.LA(1);

            if ( (LA13_0==ID) ) {
                int LA13_1 = input.LA(2);

                if ( (synpred3_Lukavrona()) ) {
                    alt13=1;
                }
                else if ( (synpred4_Lukavrona()) ) {
                    alt13=2;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return r0;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 13, 1, input);

                    throw nvae;

                }
            }
            else if ( (LA13_0==14) ) {
                int LA13_2 = input.LA(2);

                if ( (synpred3_Lukavrona()) ) {
                    alt13=1;
                }
                else if ( (synpred4_Lukavrona()) ) {
                    alt13=2;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return r0;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 13, 2, input);

                    throw nvae;

                }
            }
            else if ( (LA13_0==19) && (synpred3_Lukavrona())) {
                alt13=1;
            }
            else if ( (LA13_0==18) && (synpred3_Lukavrona())) {
                alt13=1;
            }
            else if ( (LA13_0==10) && (synpred4_Lukavrona())) {
                alt13=2;
            }
            else if ( (LA13_0==EOF) ) {
                alt13=3;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return r0;}
                NoViableAltException nvae =
                    new NoViableAltException("", 13, 0, input);

                throw nvae;

            }
            switch (alt13) {
                case 1 :
                    // output/Lukavrona/language/Lukavrona/Lukavrona.g:310:2: ( ( valuation )=>valuationExpression= valuation )
                    {
                    // output/Lukavrona/language/Lukavrona/Lukavrona.g:310:2: ( ( valuation )=>valuationExpression= valuation )
                    // output/Lukavrona/language/Lukavrona/Lukavrona.g:310:3: ( valuation )=>valuationExpression= valuation
                    {
                    pushFollow(FOLLOW_valuation_in_expressionEOF864);
                    valuationExpression=valuation();

                    state._fsp--;
                    if (state.failed) return r0;

                    if ( state.backtracking==0 ) {
                      r0 = valuationExpression;
                      }

                    }


                    }
                    break;
                case 2 :
                    // output/Lukavrona/language/Lukavrona/Lukavrona.g:317:2: ( ( formula )=>formulaExpression= formula )
                    {
                    // output/Lukavrona/language/Lukavrona/Lukavrona.g:317:2: ( ( formula )=>formulaExpression= formula )
                    // output/Lukavrona/language/Lukavrona/Lukavrona.g:317:3: ( formula )=>formulaExpression= formula
                    {
                    pushFollow(FOLLOW_formula_in_expressionEOF888);
                    formulaExpression=formula();

                    state._fsp--;
                    if (state.failed) return r0;

                    if ( state.backtracking==0 ) {
                      r0 = formulaExpression;
                      }

                    }


                    }
                    break;
                case 3 :
                    // output/Lukavrona/language/Lukavrona/Lukavrona.g:324:2: ( EOF )
                    {
                    // output/Lukavrona/language/Lukavrona/Lukavrona.g:324:2: ( EOF )
                    // output/Lukavrona/language/Lukavrona/Lukavrona.g:324:3: EOF
                    {
                    match(input,EOF,FOLLOW_EOF_in_expressionEOF903); if (state.failed) return r0;

                    }


                    }
                    break;

            }


            }

        }

        catch (RecognitionException e) {
        reportError(e);
        throw e;
        }

        finally {
        	// do for sure before leaving
        }
        return r0;
    }
    // $ANTLR end "expressionEOF"



    // $ANTLR start "tableauRule"
    // output/Lukavrona/language/Lukavrona/Lukavrona.g:327:1: tableauRule returns [MettelGeneralTableauRule r0] : ( (premises= expressions ) ( '/' ) (conclusion= expressions ) ( ( ( '$|' ) (conclusion= expressions ) )* ) ( ( ( 'priority' ) (t= INT ) )? ) ) ;
    public final MettelGeneralTableauRule tableauRule() throws RecognitionException {
        MettelGeneralTableauRule r0 = null;


        Token t=null;
        ArrayList<LukavronaExpression> premises =null;

        ArrayList<LukavronaExpression> conclusion =null;



        LinkedHashSet<LinkedHashSet<LukavronaExpression>> branches = new LinkedHashSet<LinkedHashSet<LukavronaExpression>>();
        int priority = 0;

        try {
            // output/Lukavrona/language/Lukavrona/Lukavrona.g:336:2: ( ( (premises= expressions ) ( '/' ) (conclusion= expressions ) ( ( ( '$|' ) (conclusion= expressions ) )* ) ( ( ( 'priority' ) (t= INT ) )? ) ) )
            // output/Lukavrona/language/Lukavrona/Lukavrona.g:337:2: ( (premises= expressions ) ( '/' ) (conclusion= expressions ) ( ( ( '$|' ) (conclusion= expressions ) )* ) ( ( ( 'priority' ) (t= INT ) )? ) )
            {
            // output/Lukavrona/language/Lukavrona/Lukavrona.g:337:2: ( (premises= expressions ) ( '/' ) (conclusion= expressions ) ( ( ( '$|' ) (conclusion= expressions ) )* ) ( ( ( 'priority' ) (t= INT ) )? ) )
            // output/Lukavrona/language/Lukavrona/Lukavrona.g:338:2: (premises= expressions ) ( '/' ) (conclusion= expressions ) ( ( ( '$|' ) (conclusion= expressions ) )* ) ( ( ( 'priority' ) (t= INT ) )? )
            {
            // output/Lukavrona/language/Lukavrona/Lukavrona.g:338:2: (premises= expressions )
            // output/Lukavrona/language/Lukavrona/Lukavrona.g:338:3: premises= expressions
            {
            pushFollow(FOLLOW_expressions_in_tableauRule934);
            premises=expressions();

            state._fsp--;
            if (state.failed) return r0;

            }


            // output/Lukavrona/language/Lukavrona/Lukavrona.g:339:2: ( '/' )
            // output/Lukavrona/language/Lukavrona/Lukavrona.g:339:3: '/'
            {
            match(input,17,FOLLOW_17_in_tableauRule939); if (state.failed) return r0;

            }


            // output/Lukavrona/language/Lukavrona/Lukavrona.g:340:2: (conclusion= expressions )
            // output/Lukavrona/language/Lukavrona/Lukavrona.g:340:3: conclusion= expressions
            {
            pushFollow(FOLLOW_expressions_in_tableauRule948);
            conclusion=expressions();

            state._fsp--;
            if (state.failed) return r0;

            if ( state.backtracking==0 ) {
              branches.add(new LinkedHashSet<LukavronaExpression>(conclusion));
              }

            }


            // output/Lukavrona/language/Lukavrona/Lukavrona.g:346:2: ( ( ( '$|' ) (conclusion= expressions ) )* )
            // output/Lukavrona/language/Lukavrona/Lukavrona.g:347:3: ( ( '$|' ) (conclusion= expressions ) )*
            {
            // output/Lukavrona/language/Lukavrona/Lukavrona.g:347:3: ( ( '$|' ) (conclusion= expressions ) )*
            loop14:
            do {
                int alt14=2;
                int LA14_0 = input.LA(1);

                if ( (LA14_0==12) ) {
                    alt14=1;
                }


                switch (alt14) {
            	case 1 :
            	    // output/Lukavrona/language/Lukavrona/Lukavrona.g:348:4: ( '$|' ) (conclusion= expressions )
            	    {
            	    // output/Lukavrona/language/Lukavrona/Lukavrona.g:348:4: ( '$|' )
            	    // output/Lukavrona/language/Lukavrona/Lukavrona.g:348:5: '$|'
            	    {
            	    match(input,12,FOLLOW_12_in_tableauRule969); if (state.failed) return r0;

            	    }


            	    // output/Lukavrona/language/Lukavrona/Lukavrona.g:349:4: (conclusion= expressions )
            	    // output/Lukavrona/language/Lukavrona/Lukavrona.g:349:5: conclusion= expressions
            	    {
            	    pushFollow(FOLLOW_expressions_in_tableauRule980);
            	    conclusion=expressions();

            	    state._fsp--;
            	    if (state.failed) return r0;

            	    if ( state.backtracking==0 ) {
            	        branches.add(new LinkedHashSet<LukavronaExpression>(conclusion));
            	        }

            	    }


            	    }
            	    break;

            	default :
            	    break loop14;
                }
            } while (true);


            }


            // output/Lukavrona/language/Lukavrona/Lukavrona.g:357:2: ( ( ( 'priority' ) (t= INT ) )? )
            // output/Lukavrona/language/Lukavrona/Lukavrona.g:358:3: ( ( 'priority' ) (t= INT ) )?
            {
            // output/Lukavrona/language/Lukavrona/Lukavrona.g:358:3: ( ( 'priority' ) (t= INT ) )?
            int alt15=2;
            int LA15_0 = input.LA(1);

            if ( (LA15_0==20) ) {
                alt15=1;
            }
            switch (alt15) {
                case 1 :
                    // output/Lukavrona/language/Lukavrona/Lukavrona.g:359:4: ( 'priority' ) (t= INT )
                    {
                    // output/Lukavrona/language/Lukavrona/Lukavrona.g:359:4: ( 'priority' )
                    // output/Lukavrona/language/Lukavrona/Lukavrona.g:359:5: 'priority'
                    {
                    match(input,20,FOLLOW_20_in_tableauRule1013); if (state.failed) return r0;

                    }


                    // output/Lukavrona/language/Lukavrona/Lukavrona.g:360:4: (t= INT )
                    // output/Lukavrona/language/Lukavrona/Lukavrona.g:360:5: t= INT
                    {
                    t=(Token)match(input,INT,FOLLOW_INT_in_tableauRule1024); if (state.failed) return r0;

                    }


                    if ( state.backtracking==0 ) {
                       priority = Integer.valueOf(t.getText());
                       }

                    }
                    break;

            }


            }


            }


            }

            if ( state.backtracking==0 ) {
            r0 = new MettelGeneralTableauRule(new LinkedHashSet<LukavronaExpression>(premises),branches,priority);
            }
        }

        catch (RecognitionException e) {
        reportError(e);
        throw e;
        }

        finally {
        	// do for sure before leaving
        }
        return r0;
    }
    // $ANTLR end "tableauRule"



    // $ANTLR start "tableauCalculus"
    // output/Lukavrona/language/Lukavrona/Lukavrona.g:370:1: tableauCalculus[Collection<MettelGeneralTableauRule> a0] : ( (e0= tableauRule ) ( ( ( '$;' ) ( (e0= tableauRule )? ) )* ) ( EOF ) ) ;
    public final void tableauCalculus(Collection<MettelGeneralTableauRule> a0) throws RecognitionException {
        MettelGeneralTableauRule e0 =null;


        try {
            // output/Lukavrona/language/Lukavrona/Lukavrona.g:372:2: ( ( (e0= tableauRule ) ( ( ( '$;' ) ( (e0= tableauRule )? ) )* ) ( EOF ) ) )
            // output/Lukavrona/language/Lukavrona/Lukavrona.g:373:2: ( (e0= tableauRule ) ( ( ( '$;' ) ( (e0= tableauRule )? ) )* ) ( EOF ) )
            {
            // output/Lukavrona/language/Lukavrona/Lukavrona.g:373:2: ( (e0= tableauRule ) ( ( ( '$;' ) ( (e0= tableauRule )? ) )* ) ( EOF ) )
            // output/Lukavrona/language/Lukavrona/Lukavrona.g:374:2: (e0= tableauRule ) ( ( ( '$;' ) ( (e0= tableauRule )? ) )* ) ( EOF )
            {
            // output/Lukavrona/language/Lukavrona/Lukavrona.g:374:2: (e0= tableauRule )
            // output/Lukavrona/language/Lukavrona/Lukavrona.g:374:3: e0= tableauRule
            {
            pushFollow(FOLLOW_tableauRule_in_tableauCalculus1062);
            e0=tableauRule();

            state._fsp--;
            if (state.failed) return ;

            if ( state.backtracking==0 ) {
              a0.add(e0);
              }

            }


            // output/Lukavrona/language/Lukavrona/Lukavrona.g:380:2: ( ( ( '$;' ) ( (e0= tableauRule )? ) )* )
            // output/Lukavrona/language/Lukavrona/Lukavrona.g:381:3: ( ( '$;' ) ( (e0= tableauRule )? ) )*
            {
            // output/Lukavrona/language/Lukavrona/Lukavrona.g:381:3: ( ( '$;' ) ( (e0= tableauRule )? ) )*
            loop17:
            do {
                int alt17=2;
                int LA17_0 = input.LA(1);

                if ( (LA17_0==11) ) {
                    alt17=1;
                }


                switch (alt17) {
            	case 1 :
            	    // output/Lukavrona/language/Lukavrona/Lukavrona.g:382:4: ( '$;' ) ( (e0= tableauRule )? )
            	    {
            	    // output/Lukavrona/language/Lukavrona/Lukavrona.g:382:4: ( '$;' )
            	    // output/Lukavrona/language/Lukavrona/Lukavrona.g:382:5: '$;'
            	    {
            	    match(input,11,FOLLOW_11_in_tableauCalculus1083); if (state.failed) return ;

            	    }


            	    // output/Lukavrona/language/Lukavrona/Lukavrona.g:383:4: ( (e0= tableauRule )? )
            	    // output/Lukavrona/language/Lukavrona/Lukavrona.g:384:5: (e0= tableauRule )?
            	    {
            	    // output/Lukavrona/language/Lukavrona/Lukavrona.g:384:5: (e0= tableauRule )?
            	    int alt16=2;
            	    int LA16_0 = input.LA(1);

            	    if ( (LA16_0==ID||LA16_0==10||LA16_0==14||(LA16_0 >= 17 && LA16_0 <= 19)) ) {
            	        alt16=1;
            	    }
            	    switch (alt16) {
            	        case 1 :
            	            // output/Lukavrona/language/Lukavrona/Lukavrona.g:384:6: e0= tableauRule
            	            {
            	            pushFollow(FOLLOW_tableauRule_in_tableauCalculus1100);
            	            e0=tableauRule();

            	            state._fsp--;
            	            if (state.failed) return ;

            	            if ( state.backtracking==0 ) {
            	                 a0.add(e0);
            	                 }

            	            }
            	            break;

            	    }


            	    }


            	    }
            	    break;

            	default :
            	    break loop17;
                }
            } while (true);


            }


            // output/Lukavrona/language/Lukavrona/Lukavrona.g:393:2: ( EOF )
            // output/Lukavrona/language/Lukavrona/Lukavrona.g:393:3: EOF
            {
            match(input,EOF,FOLLOW_EOF_in_tableauCalculus1132); if (state.failed) return ;

            }


            }


            }

        }

        catch (RecognitionException e) {
        reportError(e);
        throw e;
        }

        finally {
        	// do for sure before leaving
        }
        return ;
    }
    // $ANTLR end "tableauCalculus"

    // $ANTLR start synpred1_Lukavrona
    public final void synpred1_Lukavrona_fragment() throws RecognitionException {
        // output/Lukavrona/language/Lukavrona/Lukavrona.g:291:3: ( valuation )
        // output/Lukavrona/language/Lukavrona/Lukavrona.g:291:4: valuation
        {
        pushFollow(FOLLOW_valuation_in_synpred1_Lukavrona797);
        valuation();

        state._fsp--;
        if (state.failed) return ;

        }

    }
    // $ANTLR end synpred1_Lukavrona

    // $ANTLR start synpred2_Lukavrona
    public final void synpred2_Lukavrona_fragment() throws RecognitionException {
        // output/Lukavrona/language/Lukavrona/Lukavrona.g:298:3: ( formula )
        // output/Lukavrona/language/Lukavrona/Lukavrona.g:298:4: formula
        {
        pushFollow(FOLLOW_formula_in_synpred2_Lukavrona821);
        formula();

        state._fsp--;
        if (state.failed) return ;

        }

    }
    // $ANTLR end synpred2_Lukavrona

    // $ANTLR start synpred3_Lukavrona
    public final void synpred3_Lukavrona_fragment() throws RecognitionException {
        // output/Lukavrona/language/Lukavrona/Lukavrona.g:310:3: ( valuation )
        // output/Lukavrona/language/Lukavrona/Lukavrona.g:310:4: valuation
        {
        pushFollow(FOLLOW_valuation_in_synpred3_Lukavrona856);
        valuation();

        state._fsp--;
        if (state.failed) return ;

        }

    }
    // $ANTLR end synpred3_Lukavrona

    // $ANTLR start synpred4_Lukavrona
    public final void synpred4_Lukavrona_fragment() throws RecognitionException {
        // output/Lukavrona/language/Lukavrona/Lukavrona.g:317:3: ( formula )
        // output/Lukavrona/language/Lukavrona/Lukavrona.g:317:4: formula
        {
        pushFollow(FOLLOW_formula_in_synpred4_Lukavrona880);
        formula();

        state._fsp--;
        if (state.failed) return ;

        }

    }
    // $ANTLR end synpred4_Lukavrona

    // Delegated rules

    public final boolean synpred2_Lukavrona() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred2_Lukavrona_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred3_Lukavrona() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred3_Lukavrona_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred4_Lukavrona() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred4_Lukavrona_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred1_Lukavrona() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred1_Lukavrona_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }


 

    public static final BitSet FOLLOW_valuation_in_valuations72 = new BitSet(new long[]{0x00000000000C4020L});
    public static final BitSet FOLLOW_EOF_in_valuations90 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ID_in_valuationVariable114 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_valuationVariable_in_basic_valuation139 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_14_in_basic_valuation151 = new BitSet(new long[]{0x00000000000C4020L});
    public static final BitSet FOLLOW_valuation_in_basic_valuation161 = new BitSet(new long[]{0x0000000000008000L});
    public static final BitSet FOLLOW_15_in_basic_valuation167 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_basic_valuation_in_valuation_true193 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_19_in_valuation_true212 = new BitSet(new long[]{0x0000000000004420L});
    public static final BitSet FOLLOW_formula_in_valuation_true222 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_valuation_true_in_valuation_false255 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_18_in_valuation_false274 = new BitSet(new long[]{0x0000000000004420L});
    public static final BitSet FOLLOW_formula_in_valuation_false284 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_valuation_false_in_valuation318 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_formula_in_formulas341 = new BitSet(new long[]{0x0000000000004420L});
    public static final BitSet FOLLOW_EOF_in_formulas359 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ID_in_formulaVariable383 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_formulaVariable_in_basic_formula408 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_14_in_basic_formula420 = new BitSet(new long[]{0x0000000000004420L});
    public static final BitSet FOLLOW_formula_in_basic_formula430 = new BitSet(new long[]{0x0000000000008000L});
    public static final BitSet FOLLOW_15_in_basic_formula436 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_basic_formula_in_formula_negation462 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_10_in_formula_negation481 = new BitSet(new long[]{0x0000000000004020L});
    public static final BitSet FOLLOW_basic_formula_in_formula_negation491 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_formula_negation_in_formula_conjunction528 = new BitSet(new long[]{0x0000000000002002L});
    public static final BitSet FOLLOW_13_in_formula_conjunction542 = new BitSet(new long[]{0x0000000000004420L});
    public static final BitSet FOLLOW_formula_negation_in_formula_conjunction553 = new BitSet(new long[]{0x0000000000002002L});
    public static final BitSet FOLLOW_formula_conjunction_in_formula_disjunction599 = new BitSet(new long[]{0x0000000000200002L});
    public static final BitSet FOLLOW_21_in_formula_disjunction613 = new BitSet(new long[]{0x0000000000004420L});
    public static final BitSet FOLLOW_formula_conjunction_in_formula_disjunction624 = new BitSet(new long[]{0x0000000000200002L});
    public static final BitSet FOLLOW_formula_disjunction_in_formula_implication670 = new BitSet(new long[]{0x0000000000010002L});
    public static final BitSet FOLLOW_16_in_formula_implication684 = new BitSet(new long[]{0x0000000000004420L});
    public static final BitSet FOLLOW_formula_disjunction_in_formula_implication695 = new BitSet(new long[]{0x0000000000010002L});
    public static final BitSet FOLLOW_formula_implication_in_formula738 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_expression_in_expressions765 = new BitSet(new long[]{0x00000000000C4422L});
    public static final BitSet FOLLOW_valuation_in_expression805 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_formula_in_expression829 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_valuation_in_expressionEOF864 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_formula_in_expressionEOF888 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_EOF_in_expressionEOF903 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_expressions_in_tableauRule934 = new BitSet(new long[]{0x0000000000020000L});
    public static final BitSet FOLLOW_17_in_tableauRule939 = new BitSet(new long[]{0x00000000001C5420L});
    public static final BitSet FOLLOW_expressions_in_tableauRule948 = new BitSet(new long[]{0x0000000000101002L});
    public static final BitSet FOLLOW_12_in_tableauRule969 = new BitSet(new long[]{0x00000000001C5420L});
    public static final BitSet FOLLOW_expressions_in_tableauRule980 = new BitSet(new long[]{0x0000000000101002L});
    public static final BitSet FOLLOW_20_in_tableauRule1013 = new BitSet(new long[]{0x0000000000000080L});
    public static final BitSet FOLLOW_INT_in_tableauRule1024 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_tableauRule_in_tableauCalculus1062 = new BitSet(new long[]{0x0000000000000800L});
    public static final BitSet FOLLOW_11_in_tableauCalculus1083 = new BitSet(new long[]{0x00000000000E4C20L});
    public static final BitSet FOLLOW_tableauRule_in_tableauCalculus1100 = new BitSet(new long[]{0x0000000000000800L});
    public static final BitSet FOLLOW_EOF_in_tableauCalculus1132 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_valuation_in_synpred1_Lukavrona797 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_formula_in_synpred2_Lukavrona821 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_valuation_in_synpred3_Lukavrona856 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_formula_in_synpred4_Lukavrona880 = new BitSet(new long[]{0x0000000000000002L});

}