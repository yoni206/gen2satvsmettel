/**
 * This file is generated by MetTeL v2
 * which is designed and implemented
 * by Dmitry Tishkovsky.
 */
package Lukavrona.language.Lukavrona;

import java.util.Comparator;

import mettel.core.tableau.MettelExpression;
import mettel.core.tableau.MettelSubstitution;
import mettel.core.tableau.MettelAbstractExpression;
abstract class LukavronaAbstractExpression extends MettelAbstractExpression implements LukavronaExpression{

    private static volatile int expressionCounter = 0;
    private int id = -1;
    protected LukavronaObjectFactory factory = null;

    LukavronaAbstractExpression(LukavronaObjectFactory factory){
        super();
        this.factory = factory;
        id = expressionCounter++;
    }

    LukavronaAbstractExpression(){
        this(LukavronaObjectFactory.DEFAULT);
    }

    public int id(){ return id; }

    public LukavronaObjectFactory factory(){ return factory; }

    abstract int sortId();

    abstract int priority();

    public MettelSubstitution match(MettelExpression e){
        if(e instanceof LukavronaExpression) return match((LukavronaExpression)e);
        return null;
    }

    public MettelExpression substitute(MettelSubstitution s){
        if(s instanceof LukavronaSubstitution) return substitute((LukavronaSubstitution)s);
        return null;
    }

    abstract int compareArgumentsTo(LukavronaAbstractExpression e, Comparator<LukavronaAbstractExpression> c);
    abstract int compareArguments(LukavronaAbstractExpression e, Comparator<LukavronaAbstractExpression> c);

}
